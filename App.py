import streamlit as st
import random
from io import BytesIO

st.set_page_config(page_title="AI Recruitment Assistant", page_icon="🤖", layout="centered")

st.title("🤖 AI Recruitment Assistant (Demo Version)")
st.write("This is a mock demo of the Resume Optimizer app for portfolio purposes.")

# Upload resume file
uploaded_resume = st.file_uploader("📂 Upload your Resume (TXT or PDF)", type=["txt", "pdf"])

# Job description input
job_desc = st.text_area("📝 Paste the Job Description (optional):")

resume_text = ""
if uploaded_resume is not None:
    if uploaded_resume.type == "text/plain":
        resume_text = uploaded_resume.read().decode("utf-8")
    elif uploaded_resume.type == "application/pdf":
        try:
            import PyPDF2
            pdf_reader = PyPDF2.PdfReader(uploaded_resume)
            resume_text = " ".join([page.extract_text() for page in pdf_reader.pages if page.extract_text()])
        except Exception as e:
            st.error("⚠️ Could not read PDF. Please upload a valid text-based PDF.")
            resume_text = ""

if st.button("Get Feedback"):
    if resume_text.strip() == "":
        st.warning("Please upload a valid resume file first.")
    else:
        # MOCKED AI RESPONSES
        resume_feedback = [
            "✅ Your resume highlights good experience, but add measurable achievements.",
            "📝 Try to keep your resume to one page and emphasize your most recent roles.",
            "📌 Improve readability with bullet points and consistent formatting.",
            "⭐ Add a summary at the top to showcase your strengths quickly."
        ]

        comparison_feedback = [
            "🎯 Your resume matches the job description well, but you could highlight leadership skills more.",
            "⚡ The job description asks for Python experience — make sure it's clearly visible in your resume.",
            "🚀 Strong alignment! Both your resume and the job description emphasize project management.",
            "🔎 You may need to highlight soft skills like communication and teamwork to match the job posting."
        ]

        # Pick random feedback
        ai_resume_reply = random.choice(resume_feedback)
        ai_comparison_reply = random.choice(comparison_feedback) if job_desc.strip() != "" else None

        # Display results
        st.subheader("AI Feedback on Resume:")
        st.success(ai_resume_reply)

        if ai_comparison_reply:
            st.subheader("AI Comparison with Job Description:")
            st.info(ai_comparison_reply)

        # -------- DOWNLOAD FEATURE --------
        report_text = "📄 AI Resume Feedback Report\n\n"
        report_text += f"Resume Feedback:\n{ai_resume_reply}\n\n"
        if ai_comparison_reply:
            report_text += f"Job Description Comparison:\n{ai_comparison_reply}\n\n"
        report_text += "Generated by AI Recruitment Assistant (Demo)."

        # Convert to bytes for download
        report_bytes = BytesIO(report_text.encode("utf-8"))

        st.download_button(
            label="⬇️ Download Feedback Report (TXT)",
            data=report_bytes,
            file_name="AI_Resume_Feedback.txt",
            mime="text/plain"
        )

        
